// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Ray {
    float3 origin;
    float3 dir;
};

struct ShapeData
{
    int type;
    float3 position;
    float3 scale;
    float3 rot;
    float4 color;
};

static const float MAX_DIST = 100;
static const float THRESHOLD = 0.001;

RWTexture2D<float4> dest;
Texture2D<float4> source;

float Resolution;
float4x4 CamToWorldMatrix;
float4x4 InverseProjMatrix;
StructuredBuffer<ShapeData> shapes;
int shapesLen;

float4x4 GetRotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return float4x4(
        float4(1, 0, 0,0),
        float4(0, c, -s,0),
        float4(0, s, c,0),
        float4(0, 0, 0, 1)
    );
}

float4x4 GetRotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return float4x4(
        float4(c, 0, s, 0),
        float4(0, 1, 0,0),
        float4(-s, 0, c,0),
        float4(0,0,0,1)
    );
}

float4x4 GetRotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return float4x4(
        float4(c, -s, 0,0),
        float4(s, c, 0,0),
        float4(0, 0, 1,0),
        float4(0, 0, 0, 1)
    );
}

Ray CreateRay(float3 origin, float3 dir) {
    Ray ray;
    ray.origin = origin;
    ray.dir = dir; 
    return ray;
}

Ray CameraRay(float2 xy) {
    Ray ray;
    // Get cam origin in world coord
    float3 origin = mul(CamToWorldMatrix, float4(0, 0, 0, 1)).xyz;
    // Get position of pixel in camera coord
    float3 dir = mul(InverseProjMatrix, float4(xy, 0, 1)).xyz;
    // Get positon of pixel in world coord
    dir = mul(CamToWorldMatrix, float4(dir, 0)).xyz;
    dir = normalize(dir);
    return CreateRay(origin, dir);

}

float SDFBox(float3 p, float3 origin, float3 size) {
    float3 o = abs(p - origin) - size;
    float ud = length(max(o, 0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

float SDFSphere(float3 p, float3 origin, float radius) {
    return distance(p, origin) - radius;
}

float GetShapeSDF(ShapeData s, float3 p) {
    float dist;
    float4 samplePointWithRotation = float4(p,1.0);


    // Unity default rotation order is Z-X-Y: https://docs.unity3d.com/Packages/com.unity.mathematics@0.0/api/Unity.Mathematics.math.RotationOrder.html#:~:text=Unity%20default%20rotation%20order.,finally%20around%20the%20y%20axis.&text=Extrinsic%20rotation%20around%20the%20x,finally%20around%20the%20z%20axis.&text=Extrinsic%20rotation%20around%20the%20x%20axis%2C%20then%20around%20the%20z,finally%20around%20the%20y%20axis.
    samplePointWithRotation = mul(samplePointWithRotation, GetRotateY(s.rot.y));
    samplePointWithRotation = mul(samplePointWithRotation, GetRotateX(s.rot.x));
    samplePointWithRotation = mul(samplePointWithRotation, GetRotateZ(s.rot.z));
    switch (s.type) {
        case 0:
            dist = SDFSphere(samplePointWithRotation.xyz, s.position, s.scale.x);
            break;
        case 1:
            dist = SDFBox(samplePointWithRotation.xyz,s.position,s.scale);
            break;
        default:
            dist = MAX_DIST;
            break;
    }
    return dist;
}

float4 GetClosestShapeData(float3 p) {
    float closestDist = MAX_DIST;
    float3 closestColor = float3(0,0,0);
    for (int i = 0; i < shapesLen; i++) {
        ShapeData s = shapes[i];
        
        float distToShape = GetShapeSDF(s, p);
        if (distToShape < closestDist) {
            closestDist = distToShape;
            closestColor = s.color.rgb;
        }
    }
    return float4(closestColor, closestDist);
}

float3 EsitmateNormal(float3 p) {
    return normalize(float3(
        GetClosestShapeData(float3(p.x + THRESHOLD, p.yz)).w - GetClosestShapeData(float3(p.x - THRESHOLD, p.yz)).w,
        GetClosestShapeData(float3(p.x, p.y + THRESHOLD, p.z)).w - GetClosestShapeData(float3(p.x, p.y - THRESHOLD, p.z)).w,
        GetClosestShapeData(float3(p.xy, p.z + THRESHOLD)).w - GetClosestShapeData(float3(p.xy, p.z - THRESHOLD)).w
        ));
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Default to showing the scene normally
    dest[id.xy] = source[id.xy];
    uint width, height;
    dest.GetDimensions(width, height);
    float x = id.x / width * 2.0f - 1.0f;
    float y = id.y/ height * 2.0f - 1.0f;
    float2 xy = id.xy / float2(width, height) * 2 - 1;;
    Ray ray = CameraRay(xy);
    float steps = 0;
    int it = 0;
    float4 closestData;
    
    while (steps < MAX_DIST ) {
        
        closestData = GetClosestShapeData(ray.origin);
        
        //dest[id.xy] = float4(closestData.w,1,1, 1);
        //dest[id.xy] = float4(ray.origin * closestData.w, 1);
        if (closestData.w < THRESHOLD) {
            
            dest[id.xy] = float4(closestData.rgb, 1);
            break;
        }
        //March
        ray.origin = ray.origin + ray.dir * closestData.w;
        
        steps += closestData.w;
        it++;
    }
    //Result[id.xy] = float4(ray.dir * 0.5f + 0.5f, 1.0f);
    //Result[id.xy] = float4(x,y,0.0, 0.0);
    //Go through all shapes and find distance and Color 
    //if distance is smaller than threshold output the pixel
    //if greater move the distance in dir of ray
}
